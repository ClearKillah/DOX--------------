import logging
import json
import os
import sys
import time
import asyncio
import datetime
import random
from typing import Dict, Any, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from dotenv import load_dotenv

import database as db

# Enable logging with more detailed level
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO,  # Changed to INFO for production
    stream=sys.stdout  # Output to stdout for immediate visibility
)
logger = logging.getLogger(__name__)

# Conversation states
START, CHATTING, PROFILE, EDIT_PROFILE = range(4)

# User data file
USER_DATA_FILE = "user_data.json"

# Load user data from file
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# Save user data to file
def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# User data structure
user_data = load_user_data()
active_chats = {}  # Store active chat pairs
searching_users = {}  # Store users who are currently searching

# Load environment variables
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# Constants for buttons
FIND_PARTNER = "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
END_CHAT = "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"
MY_PROFILE = "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
HELP = "‚ùì –ü–æ–º–æ—â—å"

# Constants for callback data
CALLBACK_RATE = "rate_"
CALLBACK_GENDER = "gender_"
CALLBACK_AGE = "age_"
CALLBACK_INTEREST = "interest_"

# Interests
INTERESTS = [
    "–ú—É–∑—ã–∫–∞", "–ö–∏–Ω–æ", "–°–ø–æ—Ä—Ç", "–ò–≥—Ä—ã", "–ö–Ω–∏–≥–∏", 
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–ù–∞—É–∫–∞", "–ö—É–ª–∏–Ω–∞—Ä–∏—è"
]

async def update_search_timer(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Update the search timer message."""
    job = context.job
    user_id, message_id, start_time = job.data
    
    # Calculate elapsed time
    elapsed_seconds = int(time.time() - start_time)
    minutes = elapsed_seconds // 60
    seconds = elapsed_seconds % 60
    
    # Update message with new timer
    try:
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=f"üîç *–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...*\n\n‚è± –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {minutes:02d}:{seconds:02d}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cancel_search")]
            ])
        )
    except Exception as e:
        logger.error(f"Error updating search timer: {e}")
        context.job_queue.remove_job(job.name)

async def send_typing_notification(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send typing notification to simulate real conversation."""
    job = context.job
    chat_id = job.data
    
    try:
        await context.bot.send_chat_action(
            chat_id=chat_id,
            action="typing"
        )
    except Exception as e:
        logger.error(f"Error sending typing notification: {e}")
        context.job_queue.remove_job(job.name)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Send welcome message when the command /start is issued."""
    try:
        logger.debug("Start command received from user %s", update.effective_user.id)
        user_id = str(update.effective_user.id)
        
        # Initialize user if not exists
        if user_id not in user_data:
            user_data[user_id] = {
                "gender": None,
                "age": None,
                "interests": [],
                "chat_count": 0,
                "rating": 0,
                "rating_count": 0
            }
            save_user_data(user_data)
            logger.debug("New user initialized: %s", user_id)
        
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")
            ],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Get user stats
        chat_count = user_data[user_id].get("chat_count", 0)
        rating = user_data[user_id].get("rating", 0)
        rating_stars = "‚≠ê" * int(rating) + "‚òÜ" * (5 - int(rating))
        
        # Create welcome message
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dox: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç!\n\n"
            f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. "
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        
        # Add user stats if they have any chats
        if chat_count > 0:
            welcome_text += (
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {chat_count}\n"
            )
            if rating > 0:
                welcome_text += f"üìà –†–µ–π—Ç–∏–Ω–≥: {rating_stars} ({rating:.1f}/5)\n"
            welcome_text += "\n"
        
        welcome_text += "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
        
        logger.debug("Sending welcome message to user %s", user_id)
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        logger.debug("Welcome message sent successfully")
        
        return START
    except Exception as e:
        logger.error("Error in start command: %s", str(e), exc_info=True)
        # Try to send a simple message without formatting or buttons if there was an error
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception:
            logger.error("Failed to send error message", exc_info=True)
        return START

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle button presses."""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    
    if query.data == "profile":
        return await show_profile(update, context)
    
    elif query.data == "find_chat":
        return await find_chat(update, context)
    
    elif query.data == "cancel_search":
        # Remove user from searching list
        if user_id in searching_users:
            del searching_users[user_id]
        
        # Return to main menu
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")
            ],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="*–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω* ‚ùå\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return START
    
    elif query.data == "back_to_start":
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")
            ],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="*Dox: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç* üé≠\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return START
    
    elif query.data == "help":
        help_text = (
            "ü§ñ *Dox: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç* - –ü–æ–º–æ—â—å\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "*–ö–Ω–æ–ø–∫–∏:*\n"
            "‚Ä¢ üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞\n"
            "‚Ä¢ ÔøΩÔøΩ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç - –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
            "‚Ä¢ üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã)\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'\n"
            "3. –ë–æ—Ç –ø–æ–¥–±–µ—Ä–µ—Ç –≤–∞–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è\n"
            "4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
            "*–ü—Ä–∞–≤–∏–ª–∞:*\n"
            "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã\n"
            "‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∞–º –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "‚Ä¢ –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        
        await query.edit_message_text(
            text=help_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return START
    
    elif query.data == "skip_user":
        # End current chat if any
        if user_id in active_chats:
            partner_id = active_chats[user_id]
            
            # Notify partner that chat has ended
            if partner_id in active_chats:
                try:
                    await context.bot.send_message(
                        chat_id=int(partner_id),
                        text="‚ùå *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        parse_mode="Markdown",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")],
                            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                        ])
                    )
                    del active_chats[partner_id]
                except Exception as e:
                    logger.error(f"Error notifying partner: {e}")
            
            del active_chats[user_id]
        
        # Find new chat
        return await find_chat(update, context)
    
    elif query.data == "end_chat":
        # End current chat
        if user_id in active_chats:
            partner_id = active_chats[user_id]
            
            # Store last partner for rating
            context.user_data["last_partner"] = partner_id
            
            # Notify partner that chat has ended
            if partner_id in active_chats:
                try:
                    await context.bot.send_message(
                        chat_id=int(partner_id),
                        text="‚ùå *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        parse_mode="Markdown",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")],
                            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                        ])
                    )
                    del active_chats[partner_id]
                except Exception as e:
                    logger.error(f"Error notifying partner: {e}")
            
            del active_chats[user_id]
            
            # Ask to rate the partner
            keyboard = [
                [
                    InlineKeyboardButton("1‚≠ê", callback_data="rate_1"),
                    InlineKeyboardButton("2‚≠ê", callback_data="rate_2"),
                    InlineKeyboardButton("3‚≠ê", callback_data="rate_3"),
                    InlineKeyboardButton("4‚≠ê", callback_data="rate_4"),
                    InlineKeyboardButton("5‚≠ê", callback_data="rate_5")
                ]
            ]
            
            await query.edit_message_text(
                text="*–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            return START
        
        # If not in chat, return to main menu
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")
            ]
        ]
        
        await query.edit_message_text(
            text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return START
    
    elif query.data == "edit_profile":
        keyboard = [
            [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")]
        ]
        await query.edit_message_text(
            text="*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return EDIT_PROFILE
    
    elif query.data == "interest_edit":
        interests = user_data[user_id].get("interests", [])
        interests_text = "‚úÖ –§–ª–∏—Ä—Ç" if "flirt" in interests else "‚ùå –§–ª–∏—Ä—Ç"
        interests_text += "\n‚úÖ –û–±—â–µ–Ω–∏–µ" if "chat" in interests else "\n‚ùå –û–±—â–µ–Ω–∏–µ"
        
        keyboard = [
            [InlineKeyboardButton("üíò –§–ª–∏—Ä—Ç " + ("‚úÖ" if "flirt" in interests else "‚ùå"), callback_data="interest_flirt")],
            [InlineKeyboardButton("üí¨ –û–±—â–µ–Ω–∏–µ " + ("‚úÖ" if "chat" in interests else "‚ùå"), callback_data="interest_chat")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
        ]
        
        await query.edit_message_text(
            text=f"*–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return EDIT_PROFILE
    
    elif query.data.startswith("gender_"):
        gender = query.data.split("_")[1]
        user_data[user_id]["gender"] = gender
        save_user_data(user_data)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")]
        ]
        await query.edit_message_text(
            text=f"*–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        context.user_data["edit_field"] = "age"
        return EDIT_PROFILE
    
    elif query.data.startswith("interest_"):
        interest = query.data.split("_")[1]
        interests = user_data[user_id].get("interests", [])
        
        if interest in interests:
            interests.remove(interest)
        else:
            interests.append(interest)
        
        user_data[user_id]["interests"] = interests
        save_user_data(user_data)
        
        # Show updated interests
        keyboard = [
            [InlineKeyboardButton("üíò –§–ª–∏—Ä—Ç " + ("‚úÖ" if "flirt" in interests else "‚ùå"), callback_data="interest_flirt")],
            [InlineKeyboardButton("üí¨ –û–±—â–µ–Ω–∏–µ " + ("‚úÖ" if "chat" in interests else "‚ùå"), callback_data="interest_chat")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
        ]
        
        # Calculate profile completion
        completed_fields = 0
        total_fields = 3  # gender, age, interests
        
        if user_data[user_id].get("gender"):
            completed_fields += 1
        if user_data[user_id].get("age"):
            completed_fields += 1
        if interests:
            completed_fields += 1
        
        completion_percentage = int(completed_fields / total_fields * 100)
        completion_bar = "‚ñì" * (completion_percentage // 10) + "‚ñë" * (10 - completion_percentage // 10)
        
        await query.edit_message_text(
            text=f"*–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
                 f"–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n"
                 f"‚Ä¢ üíò –§–ª–∏—Ä—Ç: {('‚úÖ' if 'flirt' in interests else '‚ùå')}\n"
                 f"‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ: {('‚úÖ' if 'chat' in interests else '‚ùå')}\n\n"
                 f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ {completion_percentage}% –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return EDIT_PROFILE
    
    elif query.data == "rate_1" or query.data == "rate_2" or query.data == "rate_3" or query.data == "rate_4" or query.data == "rate_5":
        rating = int(query.data.split("_")[1])
        partner_id = context.user_data.get("last_partner")
        
        if partner_id:
            # Update partner's rating
            if partner_id in user_data:
                current_rating = user_data[partner_id].get("rating", 0)
                rating_count = user_data[partner_id].get("rating_count", 0)
                
                # Calculate new average rating
                new_rating = (current_rating * rating_count + rating) / (rating_count + 1)
                user_data[partner_id]["rating"] = new_rating
                user_data[partner_id]["rating_count"] = rating_count + 1
                save_user_data(user_data)
        
        # Show rating stars
        rating_stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
        
        keyboard = [
            [
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")
            ],
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
            ]
        ]
        
        await query.edit_message_text(
            text=f"*–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!* {rating_stars}\n\n"
                 f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating}/5\n\n"
                 f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return START
    
    return START

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show user profile."""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    user_info = user_data.get(user_id, {})
    gender = "üë® –ú—É–∂—Å–∫–æ–π" if user_info.get("gender") == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π" if user_info.get("gender") == "female" else "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"
    age = user_info.get("age", "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω")
    
    interests = user_info.get("interests", [])
    interests_text = ""
    if "flirt" in interests:
        interests_text += "‚Ä¢ üíò –§–ª–∏—Ä—Ç\n"
    if "chat" in interests:
        interests_text += "‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ\n"
    if not interests_text:
        interests_text = "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    chat_count = user_info.get("chat_count", 0)
    
    # Calculate average rating
    rating = user_info.get("rating", 0)
    rating_count = user_info.get("rating_count", 0)
    rating_stars = "‚≠ê" * int(rating) + "‚òÜ" * (5 - int(rating))
    if rating:
        rating_text = f"{rating_stars} ({rating:.1f}/5)"
        if rating_count > 0:
            rating_text += f" –Ω–∞ –æ—Å–Ω–æ–≤–µ {rating_count} –æ—Ü–µ–Ω–æ–∫"
    else:
        rating_text = "‚ùì –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    
    # Create profile completion percentage
    completed_fields = 0
    total_fields = 3  # gender, age, interests
    
    if user_info.get("gender"):
        completed_fields += 1
    if user_info.get("age"):
        completed_fields += 1
    if interests:
        completed_fields += 1
    
    completion_percentage = int(completed_fields / total_fields * 100)
    completion_bar = "‚ñì" * (completion_percentage // 10) + "‚ñë" * (10 - completion_percentage // 10)
    
    profile_text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"*–ó–∞–ø–æ–ª–Ω–µ–Ω–æ:* {completion_percentage}% {completion_bar}\n\n"
        f"*–ü–æ–ª:* {gender}\n"
        f"*–í–æ–∑—Ä–∞—Å—Ç:* {age}\n"
        f"*–ò–Ω—Ç–µ—Ä–µ—Å—ã:*\n{interests_text}\n\n"
        f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {chat_count}\n"
        f"üìà –†–µ–π—Ç–∏–Ω–≥: {rating_text}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="interest_edit")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    
    await query.edit_message_text(
        text=profile_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    return PROFILE

async def find_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Find a chat partner."""
    try:
        if update.callback_query:
            query = update.callback_query
            user_id = str(query.from_user.id)
            chat_id = query.message.chat_id
            
            logger.debug(f"User {user_id} is looking for a chat partner")
            
            # End current chat if any
            if user_id in active_chats:
                partner_id = active_chats[user_id]
                
                # Notify partner that chat has ended
                if partner_id in active_chats:
                    try:
                        await context.bot.send_message(
                            chat_id=int(partner_id),
                            text="‚ùå *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            parse_mode="Markdown",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")],
                                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                            ])
                        )
                        del active_chats[partner_id]
                    except Exception as e:
                        logger.error(f"Error notifying partner: {e}")
                
                del active_chats[user_id]
            
            # Send initial search message
            search_message = await query.edit_message_text(
                text="üîç *–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...*\n\n‚è± –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: 00:00",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cancel_search")]
                ])
            )
            
            # Store search start time
            start_time = time.time()
            
            # Simple matching algorithm
            available_users = [uid for uid in user_data.keys() 
                              if uid != user_id 
                              and uid not in active_chats 
                              and uid not in searching_users]
            
            logger.debug(f"Available users for matching: {available_users}")
            
            # Wait a bit to simulate search
            await asyncio.sleep(2)
            
            # Calculate search time
            search_time = time.time() - start_time
            minutes = int(search_time) // 60
            seconds = int(search_time) % 60
            time_text = f"‚è± –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {minutes:02d}:{seconds:02d}"
            
            if not available_users:
                logger.debug(f"No available users found for {user_id}")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üòî *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*\n\n{time_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="find_chat")],
                        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                    ])
                )
                return START
            
            # For demo purposes, just pick the first available user
            partner_id = available_users[0]
            logger.debug(f"Matched user {user_id} with partner {partner_id}")
            
            # Create chat connection
            active_chats[user_id] = partner_id
            active_chats[partner_id] = user_id
            
            # Increment chat count for both users
            user_data[user_id]["chat_count"] = user_data[user_id].get("chat_count", 0) + 1
            user_data[partner_id]["chat_count"] = user_data[partner_id].get("chat_count", 0) + 1
            save_user_data(user_data)
            
            # Store last partner for rating
            context.user_data["last_partner"] = partner_id
            
            # Get partner info
            partner_info = user_data.get(partner_id, {})
            gender = "üë® –ú—É–∂—Å–∫–æ–π" if partner_info.get("gender") == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π" if partner_info.get("gender") == "female" else "–ù–µ —É–∫–∞–∑–∞–Ω"
            age = partner_info.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω")
            
            # Prepare partner info message
            if partner_info.get("gender") or partner_info.get("age"):
                partner_text = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:*\n\n"
                if partner_info.get("gender"):
                    partner_text += f"*–ü–æ–ª:* {gender}\n"
                if partner_info.get("age"):
                    partner_text += f"*–í–æ–∑—Ä–∞—Å—Ç:* {age}\n"
                
                interests = partner_info.get("interests", [])
                if interests:
                    interests_text = ""
                    if "flirt" in interests:
                        interests_text += "‚Ä¢ üíò –§–ª–∏—Ä—Ç\n"
                    if "chat" in interests:
                        interests_text += "‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ\n"
                    partner_text += f"*–ò–Ω—Ç–µ—Ä–µ—Å—ã:*\n{interests_text}"
            else:
                partner_text = "*–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω*"
            
            # Notify both users
            keyboard = [
                [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_user")],
                [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]
            ]
            
            # Send message to the user who initiated the search
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*\n{time_text}\n\n{partner_text}\n\n*–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error sending match notification to user: {e}")
                return START
            
            # Prepare info about the user for the partner
            user_info = user_data.get(user_id, {})
            partner_text = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:*\n\n"
            
            if user_info.get("gender"):
                gender = "üë® –ú—É–∂—Å–∫–æ–π" if user_info.get("gender") == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π"
                partner_text += f"*–ü–æ–ª:* {gender}\n"
            if user_info.get("age"):
                partner_text += f"*–í–æ–∑—Ä–∞—Å—Ç:* {user_info.get('age')}\n"
            
            interests = user_info.get("interests", [])
            if interests:
                interests_text = ""
                if "flirt" in interests:
                    interests_text += "‚Ä¢ üíò –§–ª–∏—Ä—Ç\n"
                if "chat" in interests:
                    interests_text += "‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ\n"
                partner_text += f"*–ò–Ω—Ç–µ—Ä–µ—Å—ã:*\n{interests_text}"
            
            # Send message to the partner
            try:
                await context.bot.send_message(
                    chat_id=int(partner_id),
                    text=f"‚úÖ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*\n\n{partner_text}\n\n*–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                logger.debug(f"Successfully notified partner {partner_id}")
            except Exception as e:
                logger.error(f"Error notifying partner: {e}")
                # If we can't message the partner, disconnect
                if user_id in active_chats:
                    del active_chats[user_id]
                if partner_id in active_chats:
                    del active_chats[partner_id]
                
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå *–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="find_chat")],
                        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                    ])
                )
                return START
            
            return CHATTING
        
        return START
    except Exception as e:
        logger.error(f"Error in find_chat: {e}", exc_info=True)
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text="‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="find_chat")],
                        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                    ])
                )
            except Exception:
                pass
        return START

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle messages during chat."""
    user_id = str(update.effective_user.id)
    message_text = update.message.text
    
    # Check if editing profile
    if context.user_data.get("edit_field") == "age":
        try:
            age = int(message_text)
            if 13 <= age <= 100:  # Basic age validation
                user_data[user_id]["age"] = age
                save_user_data(user_data)
                
                keyboard = [
                    [InlineKeyboardButton("–§–ª–∏—Ä—Ç", callback_data="interest_flirt")],
                    [InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data="interest_chat")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
                ]
                
                interests = user_data[user_id].get("interests", [])
                interests_text = "‚úÖ –§–ª–∏—Ä—Ç" if "flirt" in interests else "‚ùå –§–ª–∏—Ä—Ç"
                interests_text += "\n‚úÖ –û–±—â–µ–Ω–∏–µ" if "chat" in interests else "\n‚ùå –û–±—â–µ–Ω–∏–µ"
                
                await update.message.reply_text(
                    text=f"*–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:*\n\n{interests_text}",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
                del context.user_data["edit_field"]
                return EDIT_PROFILE
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 13 –¥–æ 100)."
                )
                return EDIT_PROFILE
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞."
            )
            return EDIT_PROFILE
    
    # Check if in active chat
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        
        try:
            # Check if message is a command
            if message_text.startswith('/'):
                if message_text.lower() == '/end':
                    return await end_chat(update, context)
                elif message_text.lower() == '/help':
                    await update.message.reply_text(
                        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                        "/end - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç\n"
                        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                        parse_mode="Markdown"
                    )
                    return CHATTING
                else:
                    await update.message.reply_text(
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
                    )
                    return CHATTING
            
            # Forward message to partner
            await context.bot.send_message(
                chat_id=int(partner_id),
                text=message_text
            )
            
            # Add typing animation for more natural conversation
            try:
                await context.bot.send_chat_action(
                    chat_id=int(partner_id),
                    action="typing"
                )
            except Exception as e:
                logger.error(f"Error sending typing notification: {e}")
            
            return CHATTING
        except Exception as e:
            logger.error(f"Error forwarding message: {e}")
            
            # If we can't message the partner, end the chat
            if user_id in active_chats:
                del active_chats[user_id]
            if partner_id in active_chats:
                del active_chats[partner_id]
            
            keyboard = [
                [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ]
            
            await update.message.reply_text(
                text="‚ùå *–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º*\n\n–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            return START
    else:
        # Not in chat, show main menu
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")
            ]
        ]
        
        # Check if message is a command
        if message_text.startswith('/'):
            if message_text.lower() == '/start':
                await update.message.reply_text(
                    f"*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dox: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç* üé≠\n\n"
                    f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
                    f"*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
                return START
            elif message_text.lower() == '/help':
                await update.message.reply_text(
                    "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                    "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
                    "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return START
        
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return START

async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """End the current chat."""
    user_id = str(update.effective_user.id)
    
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        
        # Store last partner for rating
        context.user_data["last_partner"] = partner_id
        
        # Notify partner that chat has ended
        if partner_id in active_chats:
            try:
                await context.bot.send_message(
                    chat_id=int(partner_id),
                    text="‚ùå *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")],
                        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                    ])
                )
                del active_chats[partner_id]
            except Exception as e:
                logger.error(f"Error notifying partner: {e}")
        
        del active_chats[user_id]
        
        # Ask to rate the partner
        keyboard = [
            [
                InlineKeyboardButton("1‚≠ê", callback_data="rate_1"),
                InlineKeyboardButton("2‚≠ê", callback_data="rate_2"),
                InlineKeyboardButton("3‚≠ê", callback_data="rate_3"),
                InlineKeyboardButton("4‚≠ê", callback_data="rate_4"),
                InlineKeyboardButton("5‚≠ê", callback_data="rate_5")
            ]
        ]
        
        await update.message.reply_text(
            text="*–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return START
    
    keyboard = [
        [
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")
        ]
    ]
    
    await update.message.reply_text(
        text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return START

def main() -> None:
    """Start the bot."""
    try:
        logger.info("Starting bot...")
        # Create the Application
        token = "8039344227:AAEDCP_902a3r52JIdM9REqUyPx-p2IVtxA"
        logger.info("Using token: %s", token)
        
        # Build application
        application = (
            Application.builder()
            .token(token)
            .build()
        )
        
        # Add conversation handler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                START: [
                    CallbackQueryHandler(button_handler),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ],
                CHATTING: [
                    CallbackQueryHandler(button_handler),
                    CommandHandler("end", end_chat),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ],
                PROFILE: [
                    CallbackQueryHandler(button_handler)
                ],
                EDIT_PROFILE: [
                    CallbackQueryHandler(button_handler),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ]
            },
            fallbacks=[CommandHandler("start", start)]
        )
        
        application.add_handler(conv_handler)
        
        # Add error handler
        application.add_error_handler(error_handler)
        
        # Get environment variables for Railway
        PORT = int(os.environ.get('PORT', '8443'))
        RAILWAY_STATIC_URL = os.environ.get('RAILWAY_STATIC_URL', 'dox-production.up.railway.app')
        
        # Start the Bot with webhook if on Railway, otherwise use polling
        if 'RAILWAY_STATIC_URL' in os.environ:
            logger.info(f"Starting webhook on {RAILWAY_STATIC_URL}")
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=token,
                webhook_url=f"https://{RAILWAY_STATIC_URL}/{token}"
            )
        else:
            logger.info("Starting polling...")
            application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
        
        logger.info("Bot stopped")
    except Exception as e:
        logger.critical("Fatal error starting bot: %s", str(e), exc_info=True)
        sys.exit(1)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors in the dispatcher."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    # Send message to the user
    if update and isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

if __name__ == "__main__":
    main() 